trigger:
- main
- test

pr:
- feature/*
- release/*

pool:
  vmImage: 'ubuntu-latest'

variables:
    azureResourceGroup: 'RG_EquisoftFleet_Dev_QA'
    azureSubscription: 'ConexionFleet_QA'
    appName: 'equisoft-frontend-web-DEV'
    virtualPath: '/'
    environmentName: 'DEV'

stages:
  - stage: Build
    jobs:
      - job: BuildAndPrepare
        steps:
          # Desactivar el checkout automático
          - checkout: none

          # Inicializar el repositorio
          - script: |
              echo "🔍 Inicializando repositorio Git..."
              git init
              git remote add origin https://$(AZURE_DEVOPS_USERNAME):$(AZURE_DEVOPS_TOKEN)@dev.azure.com/EquirentVM/EquisoftFleet%20Portal%20Web%20y%20App%20Movil/_git/equisoft-frontend-web
              git fetch origin main
            displayName: '🔍 Inicializar repositorio y traer ramas'

          # Verificar configuración de Git antes del checkout
          - script: |
              echo "🔍 Verificando configuración de Git"
              git config --list
              git remote -v
            displayName: '🔍 Verificar configuración de Git'

          # Checkout del repositorio manualmente
          - script: |
              echo "🔍 Realizando Checkout..."
              git checkout main
            displayName: '🏗️ Checkout del repositorio'

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: '⬇️ Instalar Node.js 20.x'

          - script: |
              echo "⚡ Eliminando node_modules y package-lock.json..."
              rm -rf node_modules package-lock.json

              echo "📦 Instalando dependencias..."
              npm install --legacy-peer-deps

              echo "🔍 Verificando instalación...."
              npm list
            displayName: '📦 Instalar dependencias (sin fallos)'

          - script: npm run build || echo "⚠️ Build completed with errors, ignorando para desplegar igual"
            continueOnError: false
            displayName: '🏗️ Compilar código (Ignorar errores)'

          - script: mkdir -p "$(Build.ArtifactStagingDirectory)/app"
            displayName: '📂 Crear carpeta app antes de copiar archivos'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                dist/**
                package.json
                next.config.ts
              TargetFolder: '$(Build.ArtifactStagingDirectory)/app'
            displayName: '📂 Copiar archivos en app'

          - script: ls -la "$(Build.ArtifactStagingDirectory)/app"
            displayName: '🔍 Verificar archivos en app antes de publicarlos'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/app'
              ArtifactName: 'drop'
            displayName: '📤 Publicar artefactos para el despliegue'

  - stage: Deploy
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployWebApp
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(Build.ArtifactStagingDirectory)'
            displayName: '⬇️ Descargar artefacto generado en Build'

          - script: ls -la "$(Build.ArtifactStagingDirectory)/drop"
            displayName: '🔍 Verificar archivos en Artifact Staging Directory antes del despliegue'

          - task: AzureWebApp@1
            displayName: '🚀 Deploy Frontend to Linux App Service'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(appName)
              package: '$(Build.ArtifactStagingDirectory)/drop'
              runtimeStack: 'NODE|20-lts'
              removeAdditionalFilesFlag: true
              startupCommand: 'npm install --omit=dev && npm run start'
